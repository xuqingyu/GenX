"""
GenX: An Configurable Capacity Expansion Model
Copyright (C) 2021,  Massachusetts Institute of Technology
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.
This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
A complete copy of the GNU General Public License v2 (GPLv2) is available
in LICENSE.txt.  Users uncompressing this from an archive may not have
received this license file.  If not, see <http://www.gnu.org/licenses/>.
"""

@doc raw"""
	write_power(path::AbstractString, sep::AbstractString, inputs::Dict, setup::Dict, EP::Model)

Function for writing the different values of power generated by the different technologies in operation.
"""
function write_output_fleccs(path::AbstractString, sep::AbstractString, inputs::Dict, setup::Dict, EP::Model)
	gen_ccs = inputs["dfGen_ccs"]
	FLECCS_ALL = inputs["FLECCS_ALL"]
	N_F = inputs["N_F"]
	Z = inputs["Z"]
	T = inputs["T"]
	G_F = inputs["G_F"]
	# the number of rows for fleccs generator 
	#n = length(gen_ccs[!,"Resource"])/length(N_F)

    # the number of subcompoents 
	N = length(N_F)
	
	if setup["FLECCS"] == 3
		power_gt = zeros(G_F,T)
	    power_st = zeros(G_F,T)
	    power_aux = zeros(G_F,T)
	    power_heat_pump = zeros(G_F,T)
		power_net = zeros(G_F,T)

	    vSTEAM_in = zeros(G_F,T)
	    vSTEAM_out = zeros(G_F,T)
	    vCOLD_in = zeros(G_F,T)
	    vCOLD_out = zeros(G_F,T)
		vSTORE_hot = zeros(G_F,T)
		vSTORE_cold = zeros(G_F,T)
		vCAPTURE = zeros(G_F,T)
		eCO2_vent = zeros(G_F,T)
		eCO2_flue = zeros(G_F,T)

	    for i in G_F
			power_gt[i,:] = value.(EP[:ePower_gt])[i,:]
			power_st[i,:] = value.(EP[:ePower_st])[i,:]
			power_aux[i,:] = value.(EP[:ePower_aux])[i,:]
			power_heat_pump[i,:] = value.(EP[:ePower_use_ts])[i,:]
			power_net[i,:] = value.(EP[:eCCS_net])[i,:]

		    vSTEAM_in[i,:] = value.(EP[:vSTEAM_in])[i,:]
			vSTEAM_out[i,:] = value.(EP[:vSTEAM_out])[i,:]
			vCOLD_in[i,:] = value.(EP[:vCOLD_in])[i,:]
			vCOLD_out[i,:] = value.(EP[:vCOLD_out])[i,:]
			vSTORE_hot[i,:] = value.(EP[:vSTORE_hot])[i,:]
			vSTORE_cold[i,:] = value.(EP[:vSTORE_cold])[i,:]
			vCAPTURE[i,:] = value.(EP[:vCAPTURE])[i,:]
			eCO2_vent[i,:] = value.(EP[:eCO2_vent])[i,:]
			eCO2_flue[i,:] = value.(EP[:eCO2_flue])[i,:]
	    end
	end

	dfVariable_1 = DataFrame(Resource = repeat(["ePower_gt","ePower_st","ePower_aux", "ePower_use_ts","eCCS_net", "vSTEAM_in", "vSTEAM_out", "vCOLD_in", "vCOLD_out" , "vSTORE_hot", "vSTORE_cold", "vCAPTURE", "eCO2_vent", "eCO2_flue"],G_F), Zone = repeat(unique(gen_ccs[!, :Zone]),14) )



	if setup["FLECCS"] == 3
		if setup["ParameterScale"] ==1
			dfVariable = hcat(DataFrame(dfVariable_1[1,:]), DataFrame(power_gt* ModelScalingFactor, :auto))
			dfVariable =  vcat(dfVariable, hcat(DataFrame(dfVariable_1[2,:]), DataFrame(power_st* ModelScalingFactor, :auto)))
			dfVariable =  vcat(dfVariable, hcat(DataFrame(dfVariable_1[3,:]), DataFrame(power_aux* ModelScalingFactor, :auto)))
			dfVariable =  vcat(dfVariable, hcat(DataFrame(dfVariable_1[4,:]), DataFrame(power_heat_pump* ModelScalingFactor, :auto)))
			dfVariable =  vcat(dfVariable, hcat(DataFrame(dfVariable_1[5,:]), DataFrame(power_net* ModelScalingFactor, :auto)))

			dfVariable =  vcat(dfVariable, hcat(DataFrame(dfVariable_1[6,:]), DataFrame(vSTEAM_in* ModelScalingFactor, :auto)))


		    dfVariable =  vcat(dfVariable, hcat(DataFrame(dfVariable_1[7,:]), DataFrame(vSTEAM_out* ModelScalingFactor, :auto)))
		    dfVariable =  vcat(dfVariable, hcat(DataFrame(dfVariable_1[8,:]), DataFrame(vCOLD_in* ModelScalingFactor, :auto)))
		    dfVariable =  vcat(dfVariable, hcat(DataFrame(dfVariable_1[9,:]), DataFrame(vCOLD_out* ModelScalingFactor, :auto)))
		    dfVariable =  vcat(dfVariable, hcat(DataFrame(dfVariable_1[10,:]), DataFrame(vSTORE_hot* ModelScalingFactor, :auto)))
		    dfVariable =  vcat(dfVariable, hcat(DataFrame(dfVariable_1[11,:]), DataFrame(vSTORE_cold* ModelScalingFactor, :auto)))
		    dfVariable =  vcat(dfVariable, hcat(DataFrame(dfVariable_1[12,:]), DataFrame(vCAPTURE* ModelScalingFactor, :auto)))
		    dfVariable =  vcat(dfVariable, hcat(DataFrame(dfVariable_1[13,:]), DataFrame(eCO2_vent* ModelScalingFactor, :auto)))
			dfVariable =  vcat(dfVariable, hcat(DataFrame(dfVariable_1[14,:]), DataFrame(eCO2_flue* ModelScalingFactor, :auto)))

		else
			dfVariable = hcat(DataFrame(dfVariable_1[1,:]), DataFrame(power_gt, :auto))
			dfVariable =  vcat(dfVariable, hcat(DataFrame(dfVariable_1[2,:]), DataFrame(power_st, :auto)))
			dfVariable =  vcat(dfVariable, hcat(DataFrame(dfVariable_1[3,:]), DataFrame(power_aux, :auto)))
			dfVariable =  vcat(dfVariable, hcat(DataFrame(dfVariable_1[4,:]), DataFrame(power_heat_pump, :auto)))
			dfVariable =  vcat(dfVariable, hcat(DataFrame(dfVariable_1[5,:]), DataFrame(power_net, :auto)))

			dfVariable =  vcat(dfVariable, hcat(DataFrame(dfVariable_1[6,:]), DataFrame(vSTEAM_in, :auto)))


		    dfVariable =  vcat(dfVariable, hcat(DataFrame(dfVariable_1[7,:]), DataFrame(vSTEAM_out, :auto)))
		    dfVariable =  vcat(dfVariable, hcat(DataFrame(dfVariable_1[8,:]), DataFrame(vCOLD_in, :auto)))
		    dfVariable =  vcat(dfVariable, hcat(DataFrame(dfVariable_1[9,:]), DataFrame(vCOLD_out, :auto)))
		    dfVariable =  vcat(dfVariable, hcat(DataFrame(dfVariable_1[10,:]), DataFrame(vSTORE_hot, :auto)))
		    dfVariable =  vcat(dfVariable, hcat(DataFrame(dfVariable_1[11,:]), DataFrame(vSTORE_cold, :auto)))
		    dfVariable =  vcat(dfVariable, hcat(DataFrame(dfVariable_1[12,:]), DataFrame(vCAPTURE, :auto)))
		    dfVariable =  vcat(dfVariable, hcat(DataFrame(dfVariable_1[13,:]), DataFrame(eCO2_vent, :auto)))
			dfVariable =  vcat(dfVariable, hcat(DataFrame(dfVariable_1[14,:]), DataFrame(eCO2_flue, :auto)))

		end
	end



	#auxNew_Names=[Symbol("Resource");Symbol("Zone");Symbol("AnnualSum");[Symbol("t$t") for t in 1:T]]
	#rename!(dfPower,auxNew_Names)

	#total = DataFrame(["Total" 0 sum(dfPower[!,:AnnualSum]) fill(0.0, (1,T))], :auto)
	#for t in 1:T
	#	if v"1.3" <= VERSION < v"1.4"
	#		total[!,t+3] .= sum(dfPower[!,Symbol("t$t")][1: size(dfPower)[1]])
	#	elseif v"1.4" <= VERSION < v"1.7"
	#		total[:,t+3] .= sum(dfPower[:,Symbol("t$t")][1: size(dfPower)[1]])
	#	end
	#end
	#rename!(total,auxNew_Names)
	#dfPower = vcat(dfPower, total)
	#rename!(dfPower_fleccs,:Compressor => :Other_auxiliary)
	#rename!(dfPower_fleccs,:BOP => :Net_Power)

 	CSV.write(string(path,sep,"Variables_fleccs.csv"), dftranspose(dfVariable, false), writeheader=false)
	return dfVariable
end
