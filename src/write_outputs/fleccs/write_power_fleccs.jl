"""
GenX: An Configurable Capacity Expansion Model
Copyright (C) 2021,  Massachusetts Institute of Technology
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.
This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
A complete copy of the GNU General Public License v2 (GPLv2) is available
in LICENSE.txt.  Users uncompressing this from an archive may not have
received this license file.  If not, see <http://www.gnu.org/licenses/>.
"""

@doc raw"""
	write_power(path::AbstractString, sep::AbstractString, inputs::Dict, setup::Dict, EP::Model)

Function for writing the different values of power generated by the different technologies in operation.
"""
function write_power_fleccs(path::AbstractString, sep::AbstractString, inputs::Dict, setup::Dict, EP::Model)
	gen_ccs = inputs["dfGen_ccs"]
	FLECCS_ALL = inputs["FLECCS_ALL"]
	N_F = inputs["N_F"]
	Z = inputs["Z"]
	T = inputs["T"]
	G_F = inputs["G_F"]
	# the number of rows for FLECCS generator 
	#n = length(gen_ccs[!,"Resource"])/length(N_F)

    # the number of subcompoents 
	N = length(N_F)
	
	if setup["FLECCS"] == 3
	    power_gt = zeros(G_F,T)
	    power_st = zeros(G_F,T)
	    power_aux = zeros(G_F,T)
	    power_heat_pump = zeros(G_F,T)
		power_net = zeros(G_F,T)

	    for i in G_F
		    power_gt[i,:] = value.(EP[:ePower_gt])[i,:]
			power_st[i,:] = value.(EP[:ePower_st])[i,:]
			power_aux[i,:] = value.(EP[:ePower_aux])[i,:]
			power_heat_pump[i,:] = value.(EP[:ePower_use_ts])[i,:]
			power_net[i,:] = value.(EP[:eCCS_net])[i,:]
	    end
	end



	if setup["FLECCS"] == 3
		dfPower_gt = DataFrame(Resource = gen_ccs[gen_ccs[!,"Resource"] .== "NGCT", :Resource], Zone = gen_ccs[gen_ccs[!,"Resource"] .== "NGCT", :Zone], AnnualSum = Array{Union{Missing,Float32}}(undef, G_F))
		dfPower_st = DataFrame(Resource = gen_ccs[gen_ccs[!,"Resource"] .== "NGST", :Resource], Zone = gen_ccs[gen_ccs[!,"Resource"] .== "NGST", :Zone], AnnualSum = Array{Union{Missing,Float32}}(undef, G_F))
		dfPower_aux = DataFrame(Resource = gen_ccs[gen_ccs[!,"Resource"] .== "Compressor", :Resource], Zone = gen_ccs[gen_ccs[!,"Resource"] .== "Compressor", :Zone], AnnualSum = Array{Union{Missing,Float32}}(undef, G_F))
		dfPower_heat_pump = DataFrame(Resource = gen_ccs[gen_ccs[!,"Resource"] .== "HeatPump", :Resource], Zone = gen_ccs[gen_ccs[!,"Resource"] .== "HeatPump", :Zone], AnnualSum = Array{Union{Missing,Float32}}(undef, G_F))
		dfPower_net = DataFrame(Resource = gen_ccs[gen_ccs[!,"Resource"] .== "BOP", :Resource], Zone = gen_ccs[gen_ccs[!,"Resource"] .== "BOP", :Zone], AnnualSum = Array{Union{Missing,Float32}}(undef,G_F))
		
		if setup["ParameterScale"] ==1
			for i in 1:G_F
				dfPower_gt[!,:AnnualSum][i] = sum(inputs["omega"].* (value.(EP[:ePower_gt])[i,:])) * ModelScalingFactor
				dfPower_st[!,:AnnualSum][i] = sum(inputs["omega"].* (value.(EP[:ePower_st])[i,:])) * ModelScalingFactor
				dfPower_aux[!,:AnnualSum][i] = sum(inputs["omega"].* (value.(EP[:ePower_aux])[i,:])) * ModelScalingFactor
				dfPower_heat_pump[!,:AnnualSum][i] = sum(inputs["omega"].* (value.(EP[:ePower_use_ts])[i,:])) * ModelScalingFactor
				dfPower_net[!,:AnnualSum][i] = sum(inputs["omega"].* (value.(EP[:eCCS_net])[i,:])) * ModelScalingFactor
				
			end
			dfPower_gt = hcat(dfPower_gt, DataFrame( power_gt* ModelScalingFactor, :auto))
			dfPower_st = hcat(dfPower_st, DataFrame( power_st* ModelScalingFactor, :auto))
			dfPower_aux = hcat(dfPower_aux, DataFrame( power_aux* ModelScalingFactor, :auto))
			dfPower_heat_pump = hcat(dfPower_heat_pump, DataFrame( power_heat_pump* ModelScalingFactor, :auto))
			dfPower_net = hcat(dfPower_net, DataFrame( power_net* ModelScalingFactor, :auto))

			dfPower_FLECCS = vcat(dfPower_gt,dfPower_st)
			dfPower_FLECCS =vcat(dfPower_FLECCS,dfPower_aux)
			dfPower_FLECCS =vcat(dfPower_FLECCS,dfPower_heat_pump)
			dfPower_FLECCS =vcat(dfPower_FLECCS,dfPower_net)


			

		else
			for i in 1:G_F
				dfPower_gt[!,:AnnualSum][i] = sum(inputs["omega"].* (value.(EP[:ePower_gt])[i,:])) 
				dfPower_st[!,:AnnualSum][i] = sum(inputs["omega"].* (value.(EP[:ePower_st])[i,:])) 
				dfPower_aux[!,:AnnualSum][i] = sum(inputs["omega"].* (value.(EP[:ePower_aux])[i,:]))
				dfPower_heat_pump[!,:AnnualSum][i] = sum(inputs["omega"].* (value.(EP[:ePower_use_ts])[i,:])) 
				dfPower_net[!,:AnnualSum][i] = sum(inputs["omega"].* (value.(EP[:eCCS_net])[i,:]))
			end
			dfPower_gt = hcat(dfPower_gt, DataFrame( power_gt, :auto))
			dfPower_st = hcat(dfPower_st, DataFrame( power_st, :auto))
			dfPower_aux = hcat(dfPower_aux, DataFrame( power_aux, :auto))
			dfPower_heat_pump = hcat(dfPower_heat_pump, DataFrame( power_heat_pump, :auto))
			dfPower_net = hcat(dfPower_net, DataFrame( power_net, :auto))

			dfPower_FLECCS = vcat(dfPower_gt,dfPower_st)
			dfPower_FLECCS =vcat(dfPower_FLECCS,dfPower_aux)
			dfPower_FLECCS =vcat(dfPower_FLECCS,dfPower_heat_pump)
			dfPower_FLECCS =vcat(dfPower_FLECCS,dfPower_net)


		end
	end



	#auxNew_Names=[Symbol("Resource");Symbol("Zone");Symbol("AnnualSum");[Symbol("t$t") for t in 1:T]]
	#rename!(dfPower,auxNew_Names)

	#total = DataFrame(["Total" 0 sum(dfPower[!,:AnnualSum]) fill(0.0, (1,T))], :auto)
	#for t in 1:T
	#	if v"1.3" <= VERSION < v"1.4"
	#		total[!,t+3] .= sum(dfPower[!,Symbol("t$t")][1: size(dfPower)[1]])
	#	elseif v"1.4" <= VERSION < v"1.7"
	#		total[:,t+3] .= sum(dfPower[:,Symbol("t$t")][1: size(dfPower)[1]])
	#	end
	#end
	#rename!(total,auxNew_Names)
	#dfPower = vcat(dfPower, total)
	dfPower_FLECCS = dftranspose(dfPower_FLECCS, false)
	#rename!(dfPower_FLECCS,:Compressor => :Other_auxiliary)
	#rename!(dfPower_FLECCS,:BOP => :Net_Power)

 	CSV.write(string(path,sep,"power_FLECCS.csv"), dfPower_FLECCS, writeheader=false)
	return dfPower_FLECCS
end
